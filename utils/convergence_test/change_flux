#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import math
import shutil
import tempfile
import time
import subprocess

from modify_prm import modify_prm
from analyze_functions import get_last_L1_error, get_last_L2_error, get_last_Linf_error, get_comp_time
from execute_cfdfv import execute_cfdfv

if len(sys.argv) == 2 :
   flexi_path = "../../bin/cfdfv"
   if not os.path.exists(flexi_path) :
      print "path to flexi-executable '%s' is wrong, please modify script" % \
            flexi_path
      print "or use './convergence.py [path to cfdfv-executable] prm-file'"
      sys.exit(1)
   prm_path = sys.argv[1]
elif len(sys.argv) == 3 :
   flexi_path = sys.argv[1]
   prm_path = sys.argv[2]
else :
   print 'usage: ./convergence.py [path to cfdfv-executable] prm-file'
   sys.exit(1)

if not os.path.exists(prm_path) :
   print "parameter-file '%s' not found" % prm_path 
   sys.exit(1)


projectname=prm_path
projectname=projectname[:len(projectname)-4]

tprm = tempfile.NamedTemporaryFile()
shutil.copy(prm_path, tprm.name)
prm_path = tprm.name

#for line in open(prm_path, 'r').readlines() :
#   print line,

fluxes = ['Godunov       ', \
          'Roe           ',\
          'HLL           ',\
          'HLLE          ',\
          'HLLC          ',\
          'Lax-Friedrichs',\
          'Steger-Warming',\
          'central       ',\
          'AUSMD         ' ]
fluxnums = ['1', \
            '2',\
            '3',\
            '4',\
            '5',\
            '6',\
            '7',\
            '8',\
            '9' ]
i=0
for flux in fluxes :
   i = i + 1

   # modify nElems of Grid in X and Y direction
   filename=projectname+'_'+flux
   modify_prm(prm_path, {'FileName' : filename})
   modify_prm(prm_path, {'FluxFunction' : fluxnums[i-1]})
   # save last L2, Linf error for EOC computation

   start_time = time.time()
   # execute flexi and get L2, L_inf error
   L1, L2, Linf, comp_time = execute_cfdfv(flexi_path, prm_path, \
         [get_last_L1_error, get_last_L2_error, get_last_Linf_error, get_comp_time], mpi_procs = 1) 
   end_time = time.time()

   # only print rho 
   L2=[L2[0]]
   L1=[L1[0]]
   Linf=[Linf[0]]
   # output header of output-table
   if i == 1:
      sys.stdout.write("══════════════════╦")
      for j in range(len(L2))  :
         sys.stdout.write("═════════════════════════════════════════════════════════════════╦═════════════════════╦")
      sys.stdout.write('\n')
      print " Flux function    ║",
      for j in range(len(L2))  :
         sys.stdout.write(" L1 err              | L2 err              | Linf err            ║ Comp. Time          ║")
      sys.stdout.write('\n')
      sys.stdout.write("══════════════════╬")
      for j in range(len(L2))  :
         sys.stdout.write("═════════════════════════════════════════════════════════════════╬═════════════════════╬")
      sys.stdout.write('\n')
   print " %s   ║" % flux,

   # for first computation only output L2, Linf errors
   for j in range(len(L2))  :
      print "%8.4e          | %8.4e          | %8.4e          | %8.4e          ║\n" %(L1[j], L2[j], Linf[j], comp_time),
   # print end_time - start_time
   # print comp_time
   sys.stdout.flush()
